---- thread1 Matches (31 in 11 files) ----
completion_timeout_tc.c (examples\utest\testcases\drivers\ipc) line 161 : 

rt_thread_t _watching_thread1;
rt_thread_t _watching_thread2;

static void testcase(void)
testcase in completion_timeout_tc.c (examples\utest\testcases\drivers\ipc) : 
    uassert_true(consumer_thread != RT_NULL);
    _watching_thread1 = consumer_thread;
    _watching_thread2 = producer_thread;

    rt_thread_startup(consumer_thread);
event_tc.c (examples\utest\testcases\kernel) line 37 : 
rt_align(RT_ALIGN_SIZE)
static char thread1_stack[UTEST_THR_STACK_SIZE];
static struct rt_thread thread1;

rt_align(RT_ALIGN_SIZE)
static char thread2_stack[UTEST_THR_STACK_SIZE];
event_tc.c (examples\utest\testcases\kernel) line 95 : 

static void thread1_recv_static_event(void *param)
{
    rt_uint32_t e;

test_static_event_send_recv in event_tc.c (examples\utest\testcases\kernel) : 

    rt_thread_init(&thread1,
                   "thread1",
                   thread1_recv_static_event,
                   RT_NULL,
                   &thread1_stack[0],
                   sizeof(thread1_stack),
                   THREAD_PRIORITY - 1, THREAD_TIMESLICE);
    rt_thread_startup(&thread1);

    rt_thread_init(&thread2,
                   "thread2",
fs_test.c (examples\test) line 242 : 
 *
 * \param arg rt_uint32_t [0]startup thread1,[1]startup thread2.
 * \return void
 *
 */
mailbox_tc.c (examples\utest\testcases\kernel) line 26 : 
rt_align(RT_ALIGN_SIZE)
static char thread1_stack[UTEST_THR_STACK_SIZE];
static struct rt_thread thread1;

rt_align(RT_ALIGN_SIZE)
static char thread2_stack[UTEST_THR_STACK_SIZE];
mailbox_tc.c (examples\utest\testcases\kernel) line 191 : 

static void thread1_recv_static_mb(void *arg)
{
    rt_err_t result = RT_EOK;

test_static_mailbox_send_recv in mailbox_tc.c (examples\utest\testcases\kernel) : 

    rt_thread_init(&thread1,
                   "thread1",
                   thread1_recv_static_mb,
                   RT_NULL,
                   &thread1_stack[0],
                   sizeof(thread1_stack),
                   THREAD_PRIORITY - 1, THREAD_TIMESLICE);
    rt_thread_startup(&thread1);

    rt_thread_init(&thread2,
                   "thread2",
mprotect_example_exclusive_region.c (rt-thread\components\mprotect\examples) line 17 : 

rt_align(MPU_MIN_REGION_SIZE) rt_uint8_t thread1_private_data[MPU_MIN_REGION_SIZE];

static void thread1_entry(void *parameter)
{
    (void)parameter;
    /* Thread 1 configures thread1_private_data for exclusive access */
    rt_kprintf("Thread 1 configures private data\n");
    rt_mprotect_add_exclusive_region((void *)thread1_private_data, MPU_MIN_REGION_SIZE);
    rt_kprintf("Thread 1 private data address: %p - %p\n", &thread1_private_data[0], &thread1_private_data[MPU_MIN_REGION_SIZE]);
    rt_kprintf("Thread 1 reads and writes to its private data\n");
    for (int i = 0; i < MPU_MIN_REGION_SIZE; i++)
    {
        /* Thread 1 has access to its private data */
        thread1_private_data[i] = i;
        rt_kprintf("thread1_private_data[%d] = %d\n", i, thread1_private_data[i]);
    }
}

thread2_entry in mprotect_example_exclusive_region.c (rt-thread\components\mprotect\examples) : 
         */
        thread1_private_data[i] = i;
    }
}

mprotect_example_exclusive_region in mprotect_example_exclusive_region.c (rt-thread\components\mprotect\examples) : 
    rt_thread_t tid1 = RT_NULL;
    tid1 = rt_thread_create("thread1",
                           thread1_entry, RT_NULL,
                           THREAD_STACK_SIZE,
                           THREAD_PRIORITY - 1,
                           THREAD_TIMESLICE);
rt_align in mprotect_example_ro_data.c (rt-thread\components\mprotect\examples) : 

static void thread1_entry(void *parameter)
{
    (void)parameter;
    rt_kprintf("ro_data address: %p - %p\n", &ro_data[0], &ro_data[MPU_MIN_REGION_SIZE]);
mprotect_example_ro_data in mprotect_example_ro_data.c (rt-thread\components\mprotect\examples) : 
    rt_thread_t tid1 = RT_NULL;
    tid1 = rt_thread_create("thread1",
                           thread1_entry, RT_NULL,
                           THREAD_STACK_SIZE,
                           THREAD_PRIORITY - 1,
                           THREAD_TIMESLICE);
mutex_tc.c (examples\utest\testcases\kernel) line 237 : 
/* static mutex priority reverse test */
static void static_thread1_entry(void *param)
{
    /* let system schedule */
    rt_thread_mdelay(100);
test_static_pri_reverse in mutex_tc.c (examples\utest\testcases\kernel) : 

    /* thread1 */
    tid1 = rt_thread_create("thread1",
                            static_thread1_entry,
                            &static_mutex,
                            UTEST_THR_STACK_SIZE,
                            10 - 1,
mutex_tc.c (examples\utest\testcases\kernel) line 546 : 
/* dynamic mutex priority reverse test */
static void dynamic_thread1_entry(void *param)
{
    /* let system schedule */
    rt_thread_mdelay(100);
test_dynamic_pri_reverse in mutex_tc.c (examples\utest\testcases\kernel) : 

    /* thread1 */
    tid1 = rt_thread_create("thread1",
                            dynamic_thread1_entry,
                            dynamic_mutex,
                            UTEST_THR_STACK_SIZE,
                            10 - 1,
posix_testcase in pthread_cond_timedwait_2-1_tc.c (examples\utest\testcases\posix\pthread_h\functions\pthread_cond_timedwait) : 
{
    pthread_t thread1;
    struct timespec thread_start_ts = {0, 100000};

    if (pthread_mutex_init(&td.mutex, NULL) != 0) {
posix_testcase in pthread_cond_timedwait_2-1_tc.c (examples\utest\testcases\posix\pthread_h\functions\pthread_cond_timedwait) : 

    if (pthread_create(&thread1, NULL, t1_func, NULL) != 0) {
        fprintf(stderr, "Fail to create thread 1\n");
        return PTS_UNRESOLVED;
    }
    while (!t1_start)   /* wait for thread1 started */
        nanosleep(&thread_start_ts, NULL);

    /* acquire the mutex released by pthread_cond_wait() within thread 1 */
posix_testcase in pthread_cond_timedwait_2-1_tc.c (examples\utest\testcases\posix\pthread_h\functions\pthread_cond_timedwait) : 

    fprintf(stderr, "Time to wake up thread1 by signaling a condition\n");
    signaled = 1;
    if (pthread_cond_signal(&td.cond) != 0) {
        fprintf(stderr, "Main failed to signal the condition\n");
posix_testcase in pthread_cond_timedwait_2-1_tc.c (examples\utest\testcases\posix\pthread_h\functions\pthread_cond_timedwait) : 

    pthread_join(thread1, NULL);
    printf("Test PASSED\n");
    return PTS_PASS;
}
signal_tc.c (examples\utest\testcases\kernel) line 13 : 
 * case 4:rt_signal_mask/unmask, one thread self, install and unmask and mask, then kill, should can't received.
 * case 5:rt_signal_wait, two thread, thread1: install and unmask, then wait 1s; thread2: kill, should received.
 * case 6:rt_signal_wait, two thread, thread1: install and unmask, then wait 1s; thread2: sleep 2s then kill, should can't received.
 * case 7:rt_signal_kill, kill legal thread, return 0;
 * case 8:rt_signal_kill, kill illegal thread, return failed (unused);
 * case 9:rt_signal_kill, kill illegal signo, return -RT_EINVAL;
rt_signal_wait_thread in signal_tc.c (examples\utest\testcases\kernel) : 

    /* case 5:rt_signal_wait, two thread, thread1: install and unmask, then wait 1s; thread2: kill, should received. */
    if (rt_signal_wait((void *)&selectset, &recive_si, RT_TICK_PER_SECOND) != RT_EOK)
    {
        return;
rt_signal_wait_test in signal_tc.c (examples\utest\testcases\kernel) : 
    rt_thread_mdelay(1);
    /* case 5:rt_signal_wait, two thread, thread1: install and unmask, then wait 1s; thread2: kill, should received. */
    uassert_int_equal(rt_thread_kill(t1, SIGUSR1), RT_EOK);
    rt_sem_take(&_received_signal, RT_WAITING_FOREVER);
    uassert_int_equal(recive_sig, SIGUSR1);
rt_signal_wait_test2 in signal_tc.c (examples\utest\testcases\kernel) : 

    /* case 6:rt_signal_wait, two thread, thread1: install and unmask, then wait 1s; thread2: sleep 2s then kill, should can't received. */
    rt_thread_mdelay(2000);
    uassert_int_equal(rt_thread_kill(t1, SIGUSR1), RT_EOK);
    uassert_int_not_equal(
thread_sample.c (applications) line 23 : 
/* 线程1的入口函数 */
static void thread1_entry(void *parameter)
{
	rt_uint32_t count = 0;
    rt_pin_mode(GPIO_LED_B, PIN_MODE_OUTPUT);
thread1_entry in thread_sample.c (applications) : 
        rt_thread_mdelay(500);
        rt_kprintf("thread1 count: &d\n", count++);
        rt_thread_mdelay(500);  // 延时500毫秒
    }
}
thread_sample in thread_sample.c (applications) : 
{
    /* 创建线程1，名称是thread1，入口是thread1_entry */
    tid1 = rt_thread_create("thread1",
                            thread1_entry, RT_NULL,
                            THREAD_STACK_SIZE,
                            THREAD_PRIORITY, THREAD_TIMESLICE);
    /* 如果获得线程控制块，启动这个线程 */
thread_tc.c (examples\utest\testcases\kernel) line 46 : 

void thread1_entry(void *param)
{
    while (1);
}
test_dynamic_thread in thread_tc.c (examples\utest\testcases\kernel) : 

    tid1 = rt_thread_create("thread1",
                            thread1_entry,
                            (void *)1,
                            THREAD_STACK_SIZE,
                            UTEST_THR_PRIORITY + 1,
